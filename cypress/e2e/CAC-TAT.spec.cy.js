/// <reference types="Cypress" />


describe("Central de Atendimento ao Cliente - TAT", () => {
  const seconds = 3000
  beforeEach(() => {
    cy.visit("./src/index.html")
  })
  it("Verifica o título da aplicação", () => {
    cy.title().should("be.equal", "Central de Atendimento ao Cliente TAT")
  })
  it("Preencher campos obrigatórios e enviar o formulário", () => {
    const longTest = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt, tempore iusto quibusdam inventore culpa accusantium quos consequatur iure labore sequi omnis eveniet eius cum. "
    cy.clock()
    cy.get("input[id='firstName']")
      .type("Leonardo")
      .should("have.value", "Leonardo")
    cy.get("input[id='lastName']")
      .type("Barroso")
      .should("have.value", "Barroso")
    cy.get("input[type='email']")
      .type("leobarrosoadm@gmail.com")
      .should("have.value", "leobarrosoadm@gmail.com")
    cy.get("#open-text-area").type(longTest, { delay: 0})
    cy.contains("button", "Enviar").click()
    cy.get(".success").should("be.visible")
    cy.tick(seconds)
    cy.get(".success").should("not.be.visible")
  })
  it("Exibir mensagem ao submeter formulário com e-mail inválido", () => {
    cy.clock()
    cy.get("input[id='firstName']").type("Leonardo")
    cy.get("input[id='lastName']").type("Barroso")
    cy.get("input[type='email']").type("leobarrosoadmgmail.com")
    cy.get("#open-text-area").type("Conteúdo da mensagem")
    cy.contains("button", "Enviar").click()
    cy.get(".error").should("be.visible")
    cy.tick(seconds)
    cy.get(".error").should("not.be.visible")
  })
  it("Não permitir informar caractere diferente de número no input telefone", () => {
    cy.get("#phone")
      .type("Não exibir caractere diferente de number")
      .should("have.value", "")
  })
  it("Exibir mensagem quando o telefone se torna obrigatório mas não é preenchido", () => {
    cy.clock()
    cy.get("input[id='firstName']")
      .type("Leonardo")
      .should("have.value", "Leonardo")
    cy.get("input[id='lastName']")
      .type("Barroso")
      .should("have.value", "Barroso")
    cy.get("input[type='email']")
      .type("leobarrosoadm@gmail.com")
      .should("have.value", "leobarrosoadm@gmail.com")
    cy.get("#phone-checkbox").check()
    cy.get("#open-text-area").type("Conteúdo da mensagem")
    cy.contains("button", "Enviar").click()
    cy.get(".error").should("be.visible")
    cy.tick(seconds)
    cy.get(".error").should("not.be.visible")
  })
  it("Preenche e limpar os campos nome, sobrenome, email e telefone", () => {
    cy.get("input[id='firstName']")
    .type("Leonardo")
    .should("have.value", "Leonardo")
    .clear()
    .should("have.value", "")
    cy.get("input[id='lastName']")
      .type("Barroso")
      .should("have.value", "Barroso")
      .clear()
      .should("have.value", "")
    cy.get("input[type='email']")
      .type("leobarrosoadm@gmail.com")
      .should("have.value", "leobarrosoadm@gmail.com")
      .clear()
      .should("have.value", "")
    cy.get("#phone")
      .type("85999999999")
      .should("have.value", "85999999999")
      .clear()
      .should("have.value", "")
  })
  it("Exibir mensagem ao submeter o formulário sem preencher os campos obrigatórios", () => {
    cy.clock()
    cy.contains("button", "Enviar").click()
    cy.get(".error").should("be.visible")
    cy.tick(seconds)
    cy.get(".error").should("not.be.visible")
  })
  Cypress._.times(5, () => {
    it("Enviar formuário com sucesso usando um comando customizado", () => {
      cy.clock()
      cy.submeteFormularioComCamposObrigatorios()
      cy.get(".success").should("be.visible")
      cy.tick(seconds)
      cy.get(".success").should("not.be.visible")
    })
  })
  it("Selecionar um produto (YouTube) por seu texto", () => {
    cy.get("#product")
      .select("YouTube")
      .should("have.value", "youtube")
  })
  it("Selecionar um produto (Mentoria) por seu valor (value)", () => {
    cy.get("#product")
      .select("mentoria")
      .should("have.value", "mentoria")
  })
  it("Selecionar um produto (Blog) por seu índice", () => {
    cy.get("#product")
      .select(1)
      .should("have.value", "blog")
  })
  it("Selecionar o tipo de atendimento 'Feedback'", () => {
    cy.get("input[type='radio'][value= 'feedback']")
      .check()
      .should('be.checked')
  })
  it("Selecionar cada tipo de atendimento", () => {
    cy.get("input[type='radio']")
      .should("have.length", 3)
      .each(($radio) => {
        cy.wrap($radio).check()
        cy.wrap($radio).should("be.checked")
      })
  })
  it("Selecionar ambos checkboxes, depois desmarca o último", () => {
    cy.get("input[type='checkbox']")
      .check()
      .should("be.checked")
      .last()
      .uncheck()
      .should("not.be.checked")
  })
  it("Selecionar um arquivo da pasta fixtures", () => {
    cy.get("input[type='file']")
      .should("not.have.value")
      .selectFile("./cypress/fixtures/example.json")
      .should(($input) => {
        expect($input[0].files[0].name).to.equal("example.json")
      })
  })
  it("Selecionar um arquivo simulando um drag-and-drop", () => {
    cy.get("input[type='file']")
      .should("not.have.value")
      .selectFile("./cypress/fixtures/example.json", {action: "drag-drop"})
      .should(($input) => {
        expect($input[0].files[0].name).to.equal("example.json")
      })
  })
  it("Selecionar um arquivo utilizando uma fixture para a qual foi dada um alias", () => {
    cy.fixture("example.json").as("sampleFile")
    cy.get("input[type='file']")
    .selectFile("@sampleFile")
    .should(($input) => {
      expect($input[0].files[0].name).to.equal("example.json")
    })
  })
  it("Verificar que a política de privacidade abre em outra aba sem a necessidade de um clique", () => {
    cy.get("#privacy a").should("have.attr", "target", "_blank")
  })
  it("Acessar a página da política de privacidade removendo o target", () => {
    cy.get("#privacy a")
      .invoke("removeAttr", "target")
      .click()
    cy.contains("Talking About Testing")
      .should("be.visible")
  })
  it('Exibir e esconder as mensagens de sucesso e erro usando o .invoke', () => {
    cy.get('.success')
      .should('not.be.visible')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Mensagem enviada com sucesso.')
      .invoke('hide')
      .should('not.be.visible')
    cy.get('.error')
      .should('not.be.visible')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigatórios!')
      .invoke('hide')
      .should('not.be.visible')
  })
  it("Preencher a area de texto usando o comando invoke", () => {
    const longText = Cypress._.repeat("0123456789", 20)
    cy.get("#open-text-area")
      .invoke("val", longText)
      .should("have.value", longText)
  })
  it("faz uma requisição HTTP", () => {
    cy.request("https://cac-tat.s3.eu-central-1.amazonaws.com/index.html")
      .should((response) => {
        const { status, statusText, body } = response
        expect(status).to.equal(200)
        expect(statusText).to.equal("OK")  
        expect(body).to.include("CAC TAT") 
      })
  })
  it("Encontra o gato escondido", () => {
    cy.get("#cat")
      .invoke("show")
      .should("be.visible")
    cy.get("#title")
      .invoke("text", "CAT TAT")
    cy.get("#subtitle")
      .invoke("text", "Eu gosto de gatos.")
  })
})